// Code generated by https://github.com/GoComply/metaschema; DO NOT EDIT.
// Multiplexers are indirect models needed for serialization/deserialization
// as json and xml files differ materially in their structure.
package component_definition

import (
	"bytes"
	"encoding/json"
)

type AnnotationMultiplexer []Annotation

func (mplex *AnnotationMultiplexer) UnmarshalJSON(b []byte) error {
	var l []Annotation
	switch b[0] {
	case '{':
		var singleton Annotation
		if err := json.Unmarshal(b, &singleton); err != nil {
			return err
		}
		l = append(l, singleton)
	default:
		if err := json.Unmarshal(b, &l); err != nil {
			return err
		}
	}
	(*mplex) = l
	return nil
}

func (mplex *AnnotationMultiplexer) MarshalJSON() ([]byte, error) {
	js := bytes.NewBuffer([]byte{'['})

	empty := true
	for _, v := range *mplex {
		if !empty {
			if err := js.WriteByte(','); err != nil {
				return []byte{}, err
			}
		}
		empty = false

		text, err := json.Marshal(&v)
		if err != nil {
			return []byte{}, err
		}
		if _, err = js.Write(text); err != nil {
			return []byte{}, err
		}
	}
	if err := js.WriteByte(']'); err != nil {
		return []byte{}, err
	}
	return js.Bytes(), nil
}

type CapabilityMultiplexer []Capability

func (mplex *CapabilityMultiplexer) UnmarshalJSON(b []byte) error {
	var insideMap map[string]Capability
	if err := json.Unmarshal(b, &insideMap); err != nil {
		return err
	}

	l := make([]Capability, 0, len(insideMap))
	for k, v := range insideMap {
		v.Uuid = k
		l = append(l, v)
	}
	(*mplex) = l
	return nil
}

func (mplex *CapabilityMultiplexer) MarshalJSON() ([]byte, error) {
	js := bytes.NewBuffer([]byte{'{'})

	empty := true
	for _, v := range *mplex {
		if !empty {
			if err := js.WriteByte(','); err != nil {
				return []byte{}, err
			}
		}
		empty = false

		if _, err := js.WriteString("\"" + v.Uuid + "\":"); err != nil {
			return []byte{}, err
		}

		v.Uuid = ""
		text, err := json.Marshal(&v)
		if err != nil {
			return []byte{}, err
		}
		if _, err = js.Write(text); err != nil {
			return []byte{}, err
		}
	}
	if err := js.WriteByte('}'); err != nil {
		return []byte{}, err
	}
	return js.Bytes(), nil
}

type ComponentMultiplexer []Component

func (mplex *ComponentMultiplexer) UnmarshalJSON(b []byte) error {
	var insideMap map[string]Component
	if err := json.Unmarshal(b, &insideMap); err != nil {
		return err
	}

	l := make([]Component, 0, len(insideMap))
	for k, v := range insideMap {
		v.Uuid = k
		l = append(l, v)
	}
	(*mplex) = l
	return nil
}

func (mplex *ComponentMultiplexer) MarshalJSON() ([]byte, error) {
	js := bytes.NewBuffer([]byte{'{'})

	empty := true
	for _, v := range *mplex {
		if !empty {
			if err := js.WriteByte(','); err != nil {
				return []byte{}, err
			}
		}
		empty = false

		if _, err := js.WriteString("\"" + v.Uuid + "\":"); err != nil {
			return []byte{}, err
		}

		v.Uuid = ""
		text, err := json.Marshal(&v)
		if err != nil {
			return []byte{}, err
		}
		if _, err = js.Write(text); err != nil {
			return []byte{}, err
		}
	}
	if err := js.WriteByte('}'); err != nil {
		return []byte{}, err
	}
	return js.Bytes(), nil
}

type StatementMultiplexer []Statement

func (mplex *StatementMultiplexer) UnmarshalJSON(b []byte) error {
	var insideMap map[string]Statement
	if err := json.Unmarshal(b, &insideMap); err != nil {
		return err
	}

	l := make([]Statement, 0, len(insideMap))
	for k, v := range insideMap {
		v.StatementId = k
		l = append(l, v)
	}
	(*mplex) = l
	return nil
}

func (mplex *StatementMultiplexer) MarshalJSON() ([]byte, error) {
	js := bytes.NewBuffer([]byte{'{'})

	empty := true
	for _, v := range *mplex {
		if !empty {
			if err := js.WriteByte(','); err != nil {
				return []byte{}, err
			}
		}
		empty = false

		if _, err := js.WriteString("\"" + v.StatementId + "\":"); err != nil {
			return []byte{}, err
		}

		v.StatementId = ""
		text, err := json.Marshal(&v)
		if err != nil {
			return []byte{}, err
		}
		if _, err = js.Write(text); err != nil {
			return []byte{}, err
		}
	}
	if err := js.WriteByte('}'); err != nil {
		return []byte{}, err
	}
	return js.Bytes(), nil
}
