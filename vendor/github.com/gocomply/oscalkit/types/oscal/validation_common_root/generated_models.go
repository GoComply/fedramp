// Code generated by https://github.com/GoComply/metaschema; DO NOT EDIT.
package validation_common_root

import (
	"github.com/gocomply/oscalkit/types/oscal/validation_root"
)

// NOT TO BE USED IN A METASCHEMA
type VALIDATIONCommonRoot struct {

	// A reference to a control identifier.
	ControlId string `xml:"control-id,attr,omitempty" json:"control-id,omitempty"`
	// A category describing the purpose of the component.
	ComponentType string `xml:"component-type,attr,omitempty" json:"component-type,omitempty"`
	// A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.
	Source string `xml:"source,attr,omitempty" json:"source,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// TBD
	IncorporatesComponents IncorporatesComponentMultiplexer `xml:"incorporates-component,omitempty" json:"incorporates-components,omitempty"`
	// Describes which specific statements are addressed by a requirement, by pointing to a specific requirement statement within a control.
	OnlyStatements OnlyStatementMultiplexer `xml:"only-statement,omitempty" json:"only-statements,omitempty"`
	// A reference to one or more roles with responsibility for performing a function relative to the control.
	ResponsibleRoles ResponsibleRoleMultiplexer `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	// Identifies the parameter that will be filled in by the enclosed value element.
	ParameterSettings SetParameterMultiplexer `xml:"set-parameter,omitempty" json:"parameter-settings,omitempty"`
}

// Describes which specific statements are addressed by a requirement, by pointing to a specific requirement statement within a control.
type OnlyStatement struct {

	// A reference to the specific implemented statement.
	StatementId string `xml:"statement-id,attr,omitempty" json:"statement-id,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
}

// TBD
type IncorporatesComponent struct {

	// A reference to a component by its identifier
	ComponentUuid string `xml:"component-uuid,attr,omitempty" json:"component-uuid,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
}

// A reference to one or more roles with responsibility for performing a function relative to the control.
type ResponsibleRole struct {

	// The role that is responsible for the business function.
	RoleId string `xml:"role-id,attr,omitempty" json:"role-id,omitempty"`

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// References a  defined in .
	PartyUuids []PartyUuid `xml:"party-uuid,omitempty" json:"party-uuids,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
}

// Identifies the parameter that will be filled in by the enclosed value element.
type SetParameter struct {

	// Points to a parameter within a control, to which the contained value will be assigned.
	ParamId string `xml:"param-id,attr,omitempty" json:"param-id,omitempty"`

	// The phrase or string that fills-in the parameter and completes the requirement statement.
	Value Value `xml:"value,omitempty" json:"value,omitempty"`
}

// The phrase or string that fills-in the parameter and completes the requirement statement.

type Value string

type Annotation = validation_root.Annotation

type Description = validation_root.Description

type Link = validation_root.Link

type PartyUuid = validation_root.PartyUuid

type Prop = validation_root.Prop

type Remarks = validation_root.Remarks
