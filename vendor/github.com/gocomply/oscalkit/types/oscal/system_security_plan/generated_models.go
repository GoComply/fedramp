// Code generated by https://github.com/GoComply/metaschema; DO NOT EDIT.
package system_security_plan

import (
	"encoding/xml"

	"github.com/gocomply/oscalkit/types/oscal/validation_root"

	"github.com/gocomply/oscalkit/types/oscal/validation_common_root"
)

// A system security plan, such as those described in NIST SP 800-18
type SystemSecurityPlan struct {
	XMLName xml.Name `xml:"http://csrc.nist.gov/ns/oscal/1.0 system-security-plan" json:"-"`
	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// Provides information about the publication and availability of the containing document.
	Metadata *Metadata `xml:"metadata,omitempty" json:"metadata,omitempty"`
	// Used to import the OSCAL profile representing the system's control baseline.
	ImportProfile *ImportProfile `xml:"import-profile,omitempty" json:"importProfile,omitempty"`
	// Contains the characteristics of the system, such as its name, purpose, and security impact level.
	SystemCharacteristics *SystemCharacteristics `xml:"system-characteristics,omitempty" json:"systemCharacteristics,omitempty"`
	// Provides information as to how the system is implemented.
	SystemImplementation *SystemImplementation `xml:"system-implementation,omitempty" json:"systemImplementation,omitempty"`
	// Describes how the system satisfies a set of controls.
	ControlImplementation *ControlImplementation `xml:"control-implementation,omitempty" json:"controlImplementation,omitempty"`
	// A collection of citations and resource references.
	BackMatter *BackMatter `xml:"back-matter,omitempty" json:"backMatter,omitempty"`
}

// Used to import the OSCAL profile representing the system's control baseline.
type ImportProfile struct {

	// A link to a document or document fragment (actual, nominal or projected)
	Href string `xml:"href,attr,omitempty" json:"href,omitempty"`

	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
}

// Contains the characteristics of the system, such as its name, purpose, and security impact level.
type SystemCharacteristics struct {

	// A unique identifier for the system described by this system security plan.
	SystemIds []SystemId `xml:"system-id,omitempty" json:"system-ids,omitempty"`
	// The full name of the system.
	SystemName SystemName `xml:"system-name,omitempty" json:"system-name,omitempty"`
	// A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.
	SystemNameShort SystemNameShort `xml:"system-name-short,omitempty" json:"system-name-short,omitempty"`
	// A free-text description of the system.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// The date this system received its authorization.
	DateAuthorized DateAuthorized `xml:"date-authorized,omitempty" json:"date-authorized,omitempty"`
	// The overall information system sensitivity categorization, such as defined by .
	SecuritySensitivityLevel SecuritySensitivityLevel `xml:"security-sensitivity-level,omitempty" json:"security-sensitivity-level,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in .
	SystemInformation *SystemInformation `xml:"system-information,omitempty" json:"systemInformation,omitempty"`
	// The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.
	SecurityImpactLevel *SecurityImpactLevel `xml:"security-impact-level,omitempty" json:"securityImpactLevel,omitempty"`
	// Describes the operational status of the system.
	Status *Status `xml:"status,omitempty" json:"status,omitempty"`
	// A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.
	AuthorizationBoundary *AuthorizationBoundary `xml:"authorization-boundary,omitempty" json:"authorizationBoundary,omitempty"`
	// A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.
	NetworkArchitecture *NetworkArchitecture `xml:"network-architecture,omitempty" json:"networkArchitecture,omitempty"`
	// A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.
	DataFlow *DataFlow `xml:"data-flow,omitempty" json:"dataFlow,omitempty"`
	// A reference to a set of organizations or persons that have responsibility for performing a referenced role relative to the parent context.
	ResponsibleParties ResponsiblePartyMultiplexer `xml:"responsible-party,omitempty" json:"responsible-parties,omitempty"`
}

// Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in .
type SystemInformation struct {

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in .
	InformationTypes []InformationType `xml:"information-type,omitempty" json:"information-types,omitempty"`
}

// Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in .
type InformationType struct {

	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A human readable name for the information type. This title should be meaningful within the context of the system.
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// An identifier qualified by the given identification  used, such as NIST SP 800-60.
	InformationTypeIds []InformationTypeId `xml:"information-type-id,omitempty" json:"information-type-ids,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// The expected level of impact resulting from the unauthorized disclosure of information.
	ConfidentialityImpact *ConfidentialityImpact `xml:"confidentiality-impact,omitempty" json:"confidentialityImpact,omitempty"`
	// The expected level of impact resulting from the unauthorized modification of information.
	IntegrityImpact *IntegrityImpact `xml:"integrity-impact,omitempty" json:"integrityImpact,omitempty"`
	// The expected level of impact resulting from the disruption of access to or use of information or the information system.
	AvailabilityImpact *AvailabilityImpact `xml:"availability-impact,omitempty" json:"availabilityImpact,omitempty"`
}

// The expected level of impact resulting from the unauthorized disclosure of information.
type ConfidentialityImpact struct {

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base Base `xml:"base,omitempty" json:"base,omitempty"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected Selected `xml:"selected,omitempty" json:"selected,omitempty"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification *AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustment-justification,omitempty"`
}

// The expected level of impact resulting from the unauthorized modification of information.
type IntegrityImpact struct {

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base Base `xml:"base,omitempty" json:"base,omitempty"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected Selected `xml:"selected,omitempty" json:"selected,omitempty"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification *AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustment-justification,omitempty"`
}

// The expected level of impact resulting from the disruption of access to or use of information or the information system.
type AvailabilityImpact struct {

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base Base `xml:"base,omitempty" json:"base,omitempty"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected Selected `xml:"selected,omitempty" json:"selected,omitempty"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification *AdjustmentJustification `xml:"adjustment-justification,omitempty" json:"adjustment-justification,omitempty"`
}

// The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.
type SecurityImpactLevel struct {

	// A target-level of confidentiality for the system, based on the sensitivity of information within the system.
	SecurityObjectiveConfidentiality SecurityObjectiveConfidentiality `xml:"security-objective-confidentiality,omitempty" json:"security-objective-confidentiality,omitempty"`
	// A target-level of integrity for the system, based on the sensitivity of information within the system.
	SecurityObjectiveIntegrity SecurityObjectiveIntegrity `xml:"security-objective-integrity,omitempty" json:"security-objective-integrity,omitempty"`
	// A target-level of availability for the system, based on the sensitivity of information within the system.
	SecurityObjectiveAvailability SecurityObjectiveAvailability `xml:"security-objective-availability,omitempty" json:"security-objective-availability,omitempty"`
}

// Describes the operational status of the system.
type Status struct {

	// The current operating status.
	State string `xml:"state,attr,omitempty" json:"state,omitempty"`

	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
}

// A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a .
type LeveragedAuthorization struct {

	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A human readable name for the leveraged authorization in the context of the system.
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// A reference to the party that manages the leveraged system.
	PartyUuid PartyUuid `xml:"party-uuid,omitempty" json:"party-uuid,omitempty"`
	// The date this system received its authorization.
	DateAuthorized DateAuthorized `xml:"date-authorized,omitempty" json:"date-authorized,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
}

// A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.
type AuthorizationBoundary struct {

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Commentary about the system's authorization boundary that enhances the diagram.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A visual depiction of the system's authorization boundary.
	Diagrams DiagramMultiplexer `xml:"diagram,omitempty" json:"diagrams,omitempty"`
}

// A graphic that provides a visual representation the system, or some aspect of it.
type Diagram struct {

	// The identifier for this diagram.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A description of the diagram (e.g., alternate text). This can be used to support compliance with requirements from Section 508 of the United States Workforce Rehabilitation Act of 1973.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// A brief caption to annotate the diagram.
	Caption Caption `xml:"caption,omitempty" json:"caption,omitempty"`
	// Commentary about the diagram that enhances it.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
}

// A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.
type NetworkArchitecture struct {

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A graphic that provides a visual representation the system, or some aspect of it.
	Diagrams DiagramMultiplexer `xml:"diagram,omitempty" json:"diagrams,omitempty"`
}

// A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.
type DataFlow struct {

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A graphic that provides a visual representation the system, or some aspect of it.
	Diagrams DiagramMultiplexer `xml:"diagram,omitempty" json:"diagrams,omitempty"`
}

// Provides information as to how the system is implemented.
type SystemImplementation struct {

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a .
	LeveragedAuthorizations []LeveragedAuthorization `xml:"leveraged-authorization,omitempty" json:"leveraged-authorizations,omitempty"`
	// A type of user that interacts with the system based on an associated role.
	Users UserMultiplexer `xml:"user,omitempty" json:"users,omitempty"`
	// A defined component that can be part of an implemented system.
	Components ComponentMultiplexer `xml:"component,omitempty" json:"components,omitempty"`
	// A set of  entries that represent the managed inventory instances of the system.
	SystemInventory *SystemInventory `xml:"system-inventory,omitempty" json:"systemInventory,omitempty"`
}

// A type of user that interacts with the system based on an associated role.
type User struct {

	// The unique identifier for the user class.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A title for display and navigation
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A common name, short name or acronym
	ShortName ShortName `xml:"short-name,omitempty" json:"short-name,omitempty"`
	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// A reference to the roles served by the user.
	RoleIds []RoleId `xml:"role-id,omitempty" json:"role-ids,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.
	AuthorizedPrivileges []AuthorizedPrivilege `xml:"authorized-privilege,omitempty" json:"authorized-privileges,omitempty"`
}

// Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.
type AuthorizedPrivilege struct {

	// A human readable name for the privilege.
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// Describes a  function performed for a given authorized privilege by this user class.
	FunctionsPerformed []FunctionPerformed `xml:"function-performed,omitempty" json:"functions-performed,omitempty"`
}

// A defined component that can be part of an implemented system.
type Component struct {

	// The unique identifier for the component.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`
	// A category describing the purpose of the component.
	ComponentType string `xml:"component-type,attr,omitempty" json:"component-type,omitempty"`

	// A human readable name for the system component.
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// A description of the component, including information about its function.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A summary of the technological or business purpose of the component.
	Purpose Purpose `xml:"purpose,omitempty" json:"purpose,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// Describes the operational status of the system.
	Status *Status `xml:"status,omitempty" json:"status,omitempty"`
	// Defines a role that has responsibility for the component.
	ResponsibleRoles ResponsibleRoleMultiplexer `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	// Used for  components to define the protocols supported by the service.
	Protocols []Protocol `xml:"protocol,omitempty" json:"protocols,omitempty"`
}

// Information about the protocol used to provide a service.
type Protocol struct {

	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`
	// The short name of the protocol (e.g., TLS).
	Name string `xml:"name,attr,omitempty" json:"name,omitempty"`

	// A human readable name for the protocol (e.g., Transport Layer Security).
	Title Title `xml:"title,omitempty" json:"title,omitempty"`
	// Where applicable this is the IPv4 port range on which the service operates.
	PortRanges []PortRange `xml:"port-range,omitempty" json:"port-ranges,omitempty"`
}

// A set of  entries that represent the managed inventory instances of the system.
type SystemInventory struct {

	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A single managed inventory item within the system.
	InventoryItems InventoryItemMultiplexer `xml:"inventory-item,omitempty" json:"inventory-items,omitempty"`
}

// A single managed inventory item within the system.
type InventoryItem struct {

	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`
	// Organizational asset identifier that is unique in the context of the system. This may be a reference to the identifier used in an asset tracking system or a vulnerability scanning tool.
	AssetId string `xml:"asset-id,attr,omitempty" json:"asset-id,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A reference to a set of organizations or persons that have responsibility for performing a referenced role relative to the parent context.
	ResponsibleParties ResponsiblePartyMultiplexer `xml:"responsible-party,omitempty" json:"responsible-parties,omitempty"`
	// The set of componenets that are implemented in a given system inventory item.
	ImplementedComponents ImplementedComponentMultiplexer `xml:"implemented-component,omitempty" json:"implemented-components,omitempty"`
}

// The set of componenets that are implemented in a given system inventory item.
type ImplementedComponent struct {

	// A reference to a component that is implemented as part of an inventory item.
	ComponentUuid string `xml:"component-uuid,attr,omitempty" json:"component-uuid,omitempty"`
	// The type of implementation
	Use string `xml:"use,attr,omitempty" json:"use,omitempty"`

	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A reference to a set of organizations or persons that have responsibility for performing a referenced role relative to the parent context.
	ResponsibleParties ResponsiblePartyMultiplexer `xml:"responsible-party,omitempty" json:"responsible-parties,omitempty"`
}

// Describes how the system satisfies a set of controls.
type ControlImplementation struct {

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// Describes how the system satisfies an individual control.
	ImplementedRequirements []ImplementedRequirement `xml:"implemented-requirement,omitempty" json:"implemented-requirements,omitempty"`
}

// Describes how the system satisfies an individual control.
type ImplementedRequirement struct {

	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`
	// A reference to a control identifier.
	ControlId string `xml:"control-id,attr,omitempty" json:"control-id,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// Defines how the referenced component implements a set of controls.
	ByComponents ByComponentMultiplexer `xml:"by-component,omitempty" json:"by-components,omitempty"`
	// A reference to one or more roles with responsibility for performing a function relative to the control.
	ResponsibleRoles ResponsibleRoleMultiplexer `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	// Identifies the parameter that will be filled in by the enclosed value element.
	ParameterSettings SetParameterMultiplexer `xml:"set-parameter,omitempty" json:"parameter-settings,omitempty"`
	// Identifies which statements within a control are addressed.
	Statements StatementMultiplexer `xml:"statement,omitempty" json:"statements,omitempty"`
}

// Identifies which statements within a control are addressed.
type Statement struct {

	// A reference to the specific implemented statement associated with a control.
	StatementId string `xml:"statement-id,attr,omitempty" json:"statement-id,omitempty"`
	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations AnnotationMultiplexer `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A reference to one or more roles with responsibility for performing a function relative to the control.
	ResponsibleRoles ResponsibleRoleMultiplexer `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	// Defines how the referenced component implements a set of controls.
	ByComponents ByComponentMultiplexer `xml:"by-component,omitempty" json:"by-components,omitempty"`
}

// Defines how the referenced component implements a set of controls.
type ByComponent struct {

	// A reference to the component that is implementing a given control or control statement.
	ComponentUuid string `xml:"component-uuid,attr,omitempty" json:"component-uuid,omitempty"`
	// A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.
	Uuid string `xml:"uuid,attr,omitempty" json:"uuid,omitempty"`

	// A description supporting the parent item.
	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
	// A value with a name, attributed to the containing control, part, or group.
	Properties []Prop `xml:"prop,omitempty" json:"properties,omitempty"`
	// A reference to a local or remote resource
	Links []Link `xml:"link,omitempty" json:"links,omitempty"`
	// Additional commentary on the parent item.
	Remarks *Remarks `xml:"remarks,omitempty" json:"remarks,omitempty"`
	// A name/value pair with optional explanatory remarks.
	Annotations []Annotation `xml:"annotation,omitempty" json:"annotations,omitempty"`
	// A reference to one or more roles with responsibility for performing a function relative to the control.
	ResponsibleRoles ResponsibleRoleMultiplexer `xml:"responsible-role,omitempty" json:"responsible-roles,omitempty"`
	// Identifies the parameter that will be filled in by the enclosed value element.
	ParameterSettings SetParameterMultiplexer `xml:"set-parameter,omitempty" json:"parameter-settings,omitempty"`
}

// A unique identifier for the system described by this system security plan.
type SystemId struct {
	// Identifies the identification system from which the provided identifier was assigned.
	IdentifierType string `xml:"identifier-type,attr,omitempty" json:"identifier-type,omitempty"`
	Id             string `xml:",chardata" json:"id,omitempty"`
}

// The full name of the system.

type SystemName string

// A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.

type SystemNameShort string

// The overall information system sensitivity categorization, such as defined by .

type SecuritySensitivityLevel string

// An identifier qualified by the given identification  used, such as NIST SP 800-60.
type InformationTypeId struct {
	// Specifies the information type identification system used.
	System string `xml:"system,attr,omitempty" json:"system,omitempty"`
	Id     string `xml:",chardata" json:"id,omitempty"`
}

// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.

type Base string

// The selected (Confidentiality, Integrity, or Availability) security impact level.

type Selected string

// If the selected security level is different from the base security level, this contains the justification for the change.
type AdjustmentJustification = Markup

// A target-level of confidentiality for the system, based on the sensitivity of information within the system.

type SecurityObjectiveConfidentiality string

// A target-level of integrity for the system, based on the sensitivity of information within the system.

type SecurityObjectiveIntegrity string

// A target-level of availability for the system, based on the sensitivity of information within the system.

type SecurityObjectiveAvailability string

// The date this system received its authorization.

type DateAuthorized string

// A brief caption to annotate the diagram.

type Caption string

// A reference to the roles served by the user.

type RoleId string

// Describes a  function performed for a given authorized privilege by this user class.

type FunctionPerformed string

// Where applicable this is the IPv4 port range on which the service operates.
type PortRange struct {
	// Indicates the starting port number in a port range
	Start uint64 `xml:"start,attr,omitempty" json:"start,omitempty"`

	// Indicates the ending port number in a port range
	End uint64 `xml:"end,attr,omitempty" json:"end,omitempty"`

	// Indicates the transport type.
	Transport string `xml:"transport,attr,omitempty" json:"transport,omitempty"`
}

// Describes the purpose for the service within the system.

type Purpose string

type ResponsiblePartyMultiplexer = validation_root.ResponsiblePartyMultiplexer

type ResponsibleRoleMultiplexer = validation_common_root.ResponsibleRoleMultiplexer

type SetParameterMultiplexer = validation_common_root.SetParameterMultiplexer

type Annotation = validation_root.Annotation

type BackMatter = validation_root.BackMatter

type Description = validation_root.Description

type Link = validation_root.Link

type Metadata = validation_root.Metadata

type PartyUuid = validation_root.PartyUuid

type Prop = validation_root.Prop

type Remarks = validation_root.Remarks

type ResponsibleParty = validation_root.ResponsibleParty

type ResponsibleRole = validation_common_root.ResponsibleRole

type SetParameter = validation_common_root.SetParameter

type ShortName = validation_root.ShortName

type Title = validation_root.Title
